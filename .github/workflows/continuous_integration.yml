# This is a basic workflow to help you get started with Actions

name: Continuous Integration

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for certain branches
  push:
    branches:
      - dev
      - ft/*
      - hotfix/*
      - tmp/*
      - v1.*
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    name: Build project
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs single commands using the runners shell
      - run: composer validate --strict
      - run: composer install --prefer-dist --no-progress --no-suggest

      - name: Pull images
        run: docker-compose -f docker/docker-compose.yml pull --ignore-pull-failures || true

      - name: Start services
        run: docker-compose -f docker/docker-compose.yml up -d --build

      - name: Wait for services
        run: |
          while status="$(docker inspect --format="{{if .Config.Healthcheck}}{{print .State.Health.Status}}{{end}}" "$(docker-compose -f docker/docker-compose.yml ps -q php)")"; do
            case $status in
              starting) sleep 1;;
              healthy) exit 0;;
              unhealthy)
                docker-compose -f docker/docker-compose.yml ps
                docker-compose -f docker/docker-compose.yml logs
                exit 1
              ;;
            esac
          done
          exit 1

      - name: Check HTTP reachability
        if: ${{ always() }}
        run: curl -v -o /dev/null http://localhost:8080

      - name: Start and set up MySQL
        if: ${{ always() }}
        run: |
          docker exec -it api-ddd-template_php php bin/console doctrine:database:create
          docker exec api-ddd-template_php php bin/console doctrine:migrations:migrate

      - name: PHP Unit tests
        if: ${{ always() }}
        run: bin/phpunit

      - name: PHP Code Sniffer
        if: ${{ always() }}
        run: bin/phpcs src/ tests/

      - name: PHP Stan
        if: ${{ always() }}
        run: bin/phpstan analyse -c phpstan.neon

      - name: PHP Mess Detector
        if: ${{ always() }}
        run: bin/phpmd src/ text phpmd.xml

      - name: PHP Magic Number Detector
        if: ${{ always() }}
        run: bin/phpmnd src tests --progress --extensions=all

      - name: PHP Copy Paste Detector (PHPCPD)
        if: ${{ always() }}
        run: bin/phpcpd ./ --exclude=var --exclude=vendor --fuzzy --min-lines=5

      - name: Churn-php
        if: ${{ always() }}
        run: bin/churn run --configuration=churn.yml

      - name: PhpDeprecationDetector
        if: ${{ always() }}
        run: bin/phpdd src/ tests/

      - name: Twigcs (Twig checkstyle)
        if: ${{ always() }}
        run: bin/twigcs templates/

      - name: Deptrac
        if: ${{ always() }}
        run: bin/deptrac analyse
